#!/usr/bin/env python3

import os
import sys
import platform
import shutil
import json
import venv
import argparse

def get_config_path():
    """Returns the path to the configuration file based on the operating system."""
    if platform.system().lower() == "windows":
        return os.path.join(os.path.expanduser("~"), "AppData", "Local", "venv_switcher", "config.cfg")
    return os.path.join(os.path.expanduser("~"), ".venv_switcher.cfg")

def load_config():
    """Loads configuration from file. Returns default if no config exists."""
    config_path = get_config_path()
    default_config = {
        "venv_base": os.path.join(os.path.expanduser("~"), "venvs")
    }
    
    if not os.path.exists(config_path):
        return default_config
    
    try:
        with open(config_path, 'r') as f:
            return json.load(f)
    except Exception as e:
        print(f"Error reading config file: {str(e)}")
        return default_config

def save_config(config):
    """Saves configuration to file."""
    config_path = get_config_path()
    config_dir = os.path.dirname(config_path)
    
    try:
        # Create config directory if it doesn't exist
        if not os.path.exists(config_dir):
            os.makedirs(config_dir)
            
        with open(config_path, 'w') as f:
            json.dump(config, f, indent=4)
        print(f"\nConfiguration saved to: {config_path}")
        return True
    except Exception as e:
        print(f"Error saving config file: {str(e)}")
        return False

def configure_venv_location():
    """Configures the virtual environments directory location."""
    current_config = load_config()
    current_location = current_config.get("venv_base", "Not configured")
    
    print(f"\nCurrent virtual environments location: {current_location}")
    new_location = input("\nEnter new location for virtual environments (or press Enter to keep current): ").strip()
    
    if not new_location:
        print("Keeping current location.")
        return
    
    # Expand user path if necessary
    new_location = os.path.expanduser(new_location)
    
    # Create directory if it doesn't exist
    try:
        if not os.path.exists(new_location):
            create_dir = input(f"Directory {new_location} does not exist. Create it? (yes/no): ")
            if create_dir.lower() == 'yes':
                os.makedirs(new_location)
            else:
                print("Configuration cancelled.")
                return
        
        current_config["venv_base"] = new_location
        if save_config(current_config):
            print(f"Virtual environments location updated to: {new_location}")
    except Exception as e:
        print(f"Error configuring location: {str(e)}")

def get_venv_base():
    """Returns the path to the virtual environments directory."""
    config = load_config()
    return config["venv_base"]

def list_venvs():
    """Displays a list of available virtual environments."""
    venv_base = get_venv_base()
    
    if not os.path.exists(venv_base):
        print(f"Error: Virtual environments directory does not exist: {venv_base}")
        return None
    
    venvs = [d for d in os.listdir(venv_base) 
             if os.path.isdir(os.path.join(venv_base, d))]
    
    if not venvs:
        print("No virtual environments found.")
        return None
    
    print("\nAvailable virtual environments:")
    for i, venv in enumerate(venvs, 1):
        print(f"{i}. {venv}")
    
    return venvs

def remove_venv(venv_name):
    """Removes the selected virtual environment."""
    venv_base = get_venv_base()
    venv_path = os.path.join(venv_base, venv_name)
    
    if not os.path.exists(venv_path):
        print(f"Error: Environment '{venv_name}' does not exist in {venv_base}")
        return False
    
    try:
        # User confirmation
        confirm = input(f"\nAre you sure you want to remove environment '{venv_name}'? (yes/no): ")
        if confirm.lower() != 'yes':
            print("Environment removal cancelled.")
            return False
        
        # Remove environment directory
        shutil.rmtree(venv_path)
        print(f"\nEnvironment '{venv_name}' has been removed.")
        return True
    except Exception as e:
        print(f"Error while removing environment: {str(e)}")
        return False

def activate_venv(venv_name, auto_activate=False):
    """Activates the selected virtual environment."""
    
    # Check operating system
    is_windows = platform.system().lower() == "windows"
    
    # Path to virtual environments directory
    venv_base = get_venv_base()
    
    # Full path to selected environment
    venv_path = os.path.join(venv_base, venv_name)
    
    if not os.path.exists(venv_path):
        print(f"Error: Environment '{venv_name}' does not exist in {venv_base}")
        sys.exit(1)
    
    # Path to activation script
    if is_windows:
        activate_script = os.path.join(venv_path, "Scripts", "activate.bat")
        if auto_activate:
            print(f"\nTo activate environment '{venv_name}', execute the following command:")
            print(f"\ncall {activate_script}\n")
        else:
            print(f"\nTo activate environment '{venv_name}', execute the following command:")
            print(f"\ncall {activate_script}\n")
    else:
        activate_script = os.path.join(venv_path, "bin", "activate")
        if not os.path.exists(activate_script):
            print(f"Error: Activation script not found at {activate_script}")
            sys.exit(1)
        
        if auto_activate:
            # Automatically activate by starting a new shell with the venv
            print(f"\nActivating virtual environment '{venv_name}'...")
            
            # Get current shell
            current_shell = os.environ.get('SHELL', '/bin/bash')
            
            # Set environment variables for the venv
            venv_python = os.path.join(venv_path, "bin", "python")
            venv_pip = os.path.join(venv_path, "bin", "pip")
            
            # Create new environment with venv activated
            new_env = os.environ.copy()
            new_env['VIRTUAL_ENV'] = venv_path
            new_env['PATH'] = f"{os.path.join(venv_path, 'bin')}:{new_env['PATH']}"
            
            # Remove PYTHONHOME if it exists (can interfere with venv)
            if 'PYTHONHOME' in new_env:
                del new_env['PYTHONHOME']
            
            # Update PS1 to show venv name
            if 'PS1' in new_env:
                new_env['PS1'] = f"({venv_name}) {new_env['PS1']}"
            else:
                new_env['PS1'] = f"({venv_name}) $ "
            
            print(f"Virtual environment '{venv_name}' activated!")
            print(f"Python path: {venv_python}")
            print(f"To deactivate, type 'exit' or press Ctrl+D")
            print()
            
            # Start new shell with activated environment
            try:
                os.execve(current_shell, [current_shell], new_env)
            except Exception as e:
                print(f"Error starting shell: {e}")
                print(f"Fallback: source {activate_script}")
        else:
            print(f"\nTo activate environment '{venv_name}', execute the following command:")
            print(f"\nsource {activate_script}\n")
            print("Note: You can also use the alias command if you create one:")
            print(f"alias activate_{venv_name}='source {activate_script}'")

def create_venv(venv_name):
    """Creates a new virtual environment with the given name."""
    venv_base = get_venv_base()
    venv_path = os.path.join(venv_base, venv_name)
    
    # Check if environment already exists
    if os.path.exists(venv_path):
        print(f"Error: Environment '{venv_name}' already exists in {venv_base}")
        return False
    
    try:
        # Create base directory if it doesn't exist
        if not os.path.exists(venv_base):
            os.makedirs(venv_base)
        
        # Create virtual environment using EnvBuilder
        print(f"\nCreating virtual environment '{venv_name}'...")
        builder = venv.EnvBuilder(with_pip=True)
        builder.create(venv_path)
        print(f"\nVirtual environment created successfully at: {venv_path}")
        
        # Ask if the user wants to activate the environment
        activate_choice = input("\nDo you want to activate the environment now? (yes/no): ").strip().lower()
        if activate_choice == 'yes':
            activate_venv(venv_name, auto_activate=True)
        return True
    except Exception as e:
        print(f"Error creating virtual environment: {str(e)}")
        return False

def parse_arguments():
    """Parses command-line arguments."""
    parser = argparse.ArgumentParser(description='Virtual Environment Switcher')
    parser.add_argument('command', choices=['list', 'create', 'switch', 'remove', '--configure'],
                        help='Command to execute')
    return parser.parse_args()

def main():
    args = parse_arguments()
    command = args.command

    if command == '--configure':
        configure_venv_location()
    elif command == 'list':
        list_venvs()
    elif command == 'create':
        venv_name = input("\nEnter name for new virtual environment (or 'x' to cancel): ").strip()
        if venv_name.lower() == 'x':
            print("Operation cancelled.")
            sys.exit(0)
        if not venv_name:
            print("Error: Environment name cannot be empty.")
            sys.exit(1)
        create_venv(venv_name)
    elif command == 'switch':
        venvs = list_venvs()
        if not venvs:
            sys.exit(1)
        switch_venv(venvs)
    elif command == 'remove':
        venvs = list_venvs()
        if not venvs:
            sys.exit(1)
        remove_venv_interactive(venvs)

    else:
        print("Unknown command. Use 'list', 'create', 'switch', 'remove' or '--configure'")
        sys.exit(1)

def switch_venv(venvs):
    """Handles the logic for switching virtual environments with automatic activation."""
    try:
        choice = input("\nSelect environment number to activate (or 'x' to cancel): ").strip().lower()
        if choice == 'x':
            print("Operation cancelled.")
            sys.exit(0)
        venv_index = int(choice) - 1
        if 0 <= venv_index < len(venvs):
            activate_venv(venvs[venv_index], auto_activate=True)
        else:
            print("Invalid environment number.")
            sys.exit(1)
    except ValueError:
        print("Please enter a valid number or 'x' to cancel.")
        sys.exit(1)

def remove_venv_interactive(venvs):
    """Handles the logic for interactively removing virtual environments."""
    try:
        choice = input("\nSelect environment number to remove (or 'x' to cancel): ").strip().lower()
        if choice == 'x':
            print("Operation cancelled.")
            sys.exit(0)
        venv_index = int(choice) - 1
        if 0 <= venv_index < len(venvs):
            remove_venv(venvs[venv_index])
        else:
            print("Invalid environment number.")
            sys.exit(1)
    except ValueError:
        print("Please enter a valid number or 'x' to cancel.")
        sys.exit(1)

if __name__ == "__main__":
    main()
